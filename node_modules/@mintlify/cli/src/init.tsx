import { select, input } from '@inquirer/prompts';
import { addLogs, addLog, SpinnerLog, removeLastLog } from '@mintlify/previewing';
import { docsConfigSchema } from '@mintlify/validation';
import AdmZip from 'adm-zip';
import fse from 'fs-extra';
import { Box, Text } from 'ink';

const sendOnboardingMessage = (installDir: string) => {
  addLogs(
    <Text bold>Documentation Setup!</Text>,
    <Text>To see your docs run</Text>,
    <Box>
      <Text color="blue">cd</Text>
      <Text> {installDir}</Text>
    </Box>,
    <Text color="blue">mint dev</Text>
  );
};

export async function init(installDir: string): Promise<void> {
  await fse.ensureDir(installDir);
  const dirContents = await fse.readdir(installDir).catch(() => []);
  if (dirContents.length > 0) {
    const choice = await select({
      message: `Directory ${installDir} is not empty. What would you like to do?`,
      choices: [
        { name: 'Create in a subdirectory', value: 'subdir' },
        { name: 'Overwrite current directory (may lose contents)', value: 'overwrite' },
        { name: 'Cancel', value: 'cancel' },
      ],
    });

    if (choice === 'cancel') {
      return;
    }

    if (choice === 'subdir') {
      const subdir = await input({
        message: 'Subdirectory name:',
        default: 'docs',
      });
      if (!subdir || subdir.trim() === '') {
        throw new Error('Subdirectory name cannot be empty');
      }
      installDir = installDir === '.' ? subdir : `${installDir}/${subdir}`;
      await fse.ensureDir(installDir);
    }
  }

  const defaultProject = installDir == '.' ? 'Mintlify' : installDir;
  const projectName = await input({
    message: 'Project Name',
    default: defaultProject,
  });

  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  const themes = docsConfigSchema.options.map((option: any) => {
    return option.shape.theme._def.value;
  });

  const theme = await select({
    message: 'Theme',
    choices: themes.map((t: string) => ({
      name: t,
      value: t,
    })),
  });

  addLog(<SpinnerLog message="downloading starter template..." />);
  const response = await fetch('https://github.com/mintlify/starter/archive/refs/heads/main.zip');
  const buffer = await response.arrayBuffer();
  await fse.writeFile(installDir + '/starter.zip', Buffer.from(buffer));
  removeLastLog();

  addLog(<SpinnerLog message="extracting..." />);
  new AdmZip(installDir + '/starter.zip').extractAllTo(installDir, true);
  removeLastLog();

  await fse.copy(installDir + '/starter-main', installDir, {
    overwrite: true,
    filter: (src) => !src.includes('starter-main/starter-main'),
  });
  await fse.remove(installDir + '/starter.zip');
  await fse.remove(installDir + '/starter-main');

  const docsJsonPath = installDir + '/docs.json';
  const docsConfig = await fse.readJson(docsJsonPath);
  docsConfig.theme = theme;
  docsConfig.name = projectName;
  await fse.writeJson(docsJsonPath, docsConfig, { spaces: 2 });

  sendOnboardingMessage(installDir);
}
