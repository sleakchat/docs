import { rehypeCodeBlocks, rehypeDynamicTailwindCss, rehypeMdxExtractEndpoint, rehypeMdxExtractExamples, rehypeParamFieldIds, rehypeRawComponents, rehypeTable, rehypeUnicodeIds, rehypeZoomImages, remarkExtractChangelogFilters, remarkExtractTableOfContents, remarkFrames, remarkComponentIds, remarkMdxInjectSnippets, remarkMdxRemoveUnusedVariables, remarkRemoveImports, remarkMdxExtractPanel, remarkVideo, } from './plugins/index.js';
import { remarkMdxRemoveUnknownJsx } from './plugins/remark/remarkMdxRemoveUnknownJsx/index.js';
import { remarkMermaid } from './plugins/remark/remarkMermaid.js';
// avoid running extractors unnecessarily
const rehypeExtractors = (mdxExtracts, data) => {
    if (!mdxExtracts)
        return [];
    return [
        [rehypeMdxExtractExamples, mdxExtracts],
        [rehypeMdxExtractEndpoint, data.pageMetadata, data.config, mdxExtracts],
    ];
};
export const getMDXOptions = ({ data, remarkPlugins = [], rehypePlugins = [], mdxExtracts, }) => {
    return {
        remarkPlugins: [
            [remarkMdxInjectSnippets, data.snippetTreeMap],
            [remarkComponentIds, data.pageMetadata],
            [remarkExtractTableOfContents, mdxExtracts, data.pageMetadata], // modifies tree so cannot be excluded
            [remarkExtractChangelogFilters, mdxExtracts],
            [remarkMdxExtractPanel, mdxExtracts],
            remarkMdxRemoveUnusedVariables,
            remarkFrames,
            remarkRemoveImports,
            remarkMermaid,
            remarkVideo,
            ...remarkPlugins,
            remarkMdxRemoveUnknownJsx,
        ],
        rehypePlugins: [
            rehypeCodeBlocks,
            rehypeParamFieldIds,
            ...rehypeExtractors(mdxExtracts, data),
            rehypeTable,
            rehypeRawComponents,
            rehypeZoomImages,
            rehypeUnicodeIds,
            [rehypeDynamicTailwindCss, data.tailwindSelectors],
            ...rehypePlugins,
        ],
        format: 'mdx',
    };
};
