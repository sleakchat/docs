'use client';
import { jsx as _jsx } from "react/jsx-runtime";
// copied from fuma's approach for custom popup
// https://github.com/fuma-nama/fumadocs/blob/dev/packages/twoslash/src/ui/popup.tsx
import { Popover, PopoverContent, PopoverPortal, PopoverTrigger } from '@radix-ui/react-popover';
import { createContext, forwardRef, useContext, useMemo, useRef, useState, } from 'react';
const PopupContext = createContext(undefined);
function Popup({ delay = 300, children }) {
    const [open, setOpen] = useState(false);
    const openTimeoutRef = useRef(undefined);
    const closeTimeoutRef = useRef(undefined);
    return (_jsx(Popover, { open: open, onOpenChange: setOpen, children: _jsx(PopupContext.Provider, { value: useMemo(() => ({
                open,
                setOpen,
                handleOpen(e) {
                    if (e.pointerType === 'touch')
                        return;
                    if (closeTimeoutRef.current)
                        clearTimeout(closeTimeoutRef.current);
                    openTimeoutRef.current = window.setTimeout(() => {
                        setOpen(true);
                    }, delay);
                },
                handleClose(e) {
                    if (e.pointerType === 'touch')
                        return;
                    if (openTimeoutRef.current)
                        clearTimeout(openTimeoutRef.current);
                    closeTimeoutRef.current = window.setTimeout(() => {
                        setOpen(false);
                    }, delay);
                },
            }), [delay, open]), children: children }) }));
}
const PopupTrigger = forwardRef(({ children, href, target, rel, ...props }, ref) => {
    const ctx = useContext(PopupContext);
    if (!ctx)
        throw new Error('Missing Popup Context');
    let element;
    if (href) {
        element = (_jsx("a", { href: href, rel: rel, target: target, children: _jsx("span", { className: "twoslash-hover", children: children }) }));
    }
    else {
        element = _jsx("span", { className: "twoslash-hover", children: children });
    }
    return (_jsx(PopoverTrigger, { ref: ref, onPointerEnter: ctx.handleOpen, onPointerLeave: ctx.handleClose, asChild: true, ...props, children: element }));
});
PopupTrigger.displayName = 'PopupTrigger';
const PopupContent = forwardRef(({ className, side = 'bottom', align = 'center', sideOffset = 4, ...props }, ref) => {
    const ctx = useContext(PopupContext);
    if (!ctx)
        throw new Error('Missing Popup Context');
    return (_jsx(PopoverPortal, { children: _jsx(PopoverContent, { ref: ref, side: side, align: align, sideOffset: sideOffset, className: 'mint-twoslash-popover ' + className, onPointerEnter: ctx.handleOpen, onPointerLeave: ctx.handleClose, onOpenAutoFocus: (e) => {
                e.preventDefault();
            }, onCloseAutoFocus: (e) => {
                e.preventDefault();
            }, ...props }) }));
});
PopupContent.displayName = 'PopupContent';
export { Popup, PopupTrigger, PopupContent };
