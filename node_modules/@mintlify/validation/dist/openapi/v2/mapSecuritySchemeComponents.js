import hash from 'object-hash';
import { v4 as uuidv4 } from 'uuid';
export const mapSecuritySchemeComponents = ({ spec, refUuidMap, uuidObjectHashMap, hashedNodeMap, }) => {
    var _a;
    const securitySchemeComponents = (_a = spec.components) === null || _a === void 0 ? void 0 : _a.securitySchemes;
    if (!securitySchemeComponents)
        return;
    Object.entries(securitySchemeComponents).forEach(([securitySchemeName, securityScheme]) => {
        const refId = `#/components/securitySchemes/${securitySchemeName}`;
        const uuid = refUuidMap[refId] || uuidv4();
        const objectHash = hash(securityScheme);
        uuidObjectHashMap[uuid] = objectHash;
        if ('$ref' in securityScheme && securityScheme.$ref) {
            const refId = securityScheme.$ref;
            const refUuid = refUuidMap[refId] || uuidv4();
            securityScheme.$ref = refUuid;
        }
        hashedNodeMap[objectHash] = securityScheme;
    });
};
